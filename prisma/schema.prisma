generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(uuid())
  keycloakId  String?     @unique @map("keycloak_id")
  username    String?     @unique
  email       String     @unique
  displayName String?    @map("display_name")
  bio         String?
  avatarUrl   String?    @map("avatar_url")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  followers   Follow[]   @relation("UserFollowers")
  following   Follow[]   @relation("UserFollowing")
  pollVotes   PollVote[]
  polls       Poll[]
  password    String?
  preferences Json?

  @@map("users")
  @@index([createdAt], name: "idx_users_created_at")
  @@index([username], name: "idx_users_username")
  @@index([email], name: "idx_users_email")
}

model Follow {
  followerId  String   @map("follower_id")
  followingId String   @map("following_id")
  createdAt   DateTime @default(now()) @map("created_at")
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
  @@map("follows")
  @@index([followerId], name: "idx_follows_follower_id")
  @@index([followingId], name: "idx_follows_following_id")
  @@index([createdAt], name: "idx_follows_created_at")
}

model Poll {
  id        String     @id @default(uuid())
  postId    String     @map("post_id")
  question  String
  options   Json
  expiresAt DateTime?  @map("expires_at")
  createdAt DateTime   @default(now()) @map("created_at")
  userId    String     @map("user_id")
  votes     PollVote[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("polls")
  @@index([postId], name: "idx_polls_post_id")
  @@index([userId], name: "idx_polls_user_id")
  @@index([createdAt], name: "idx_polls_created_at")
  @@index([expiresAt], name: "idx_polls_expires_at")
}

model PollVote {
  id          String   @id @default(uuid())
  pollId      String   @map("poll_id")
  userId      String   @map("user_id")
  optionIndex Int      @map("option_index")
  createdAt   DateTime @default(now()) @map("created_at")
  poll        Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pollId, userId])
  @@map("poll_votes")
  @@index([pollId], name: "idx_poll_votes_poll_id")
  @@index([userId], name: "idx_poll_votes_user_id")
  @@index([createdAt], name: "idx_poll_votes_created_at")
}
